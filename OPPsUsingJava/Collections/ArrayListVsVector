                 ArrayList	                                                                                      Vector
1.	ArrayList is not synchronized.	                                                           1.   Vector is synchronized.
2.	ArrayList increments 50% of the current                                                    2.   Vector increments 100% means doubles the array size
array size if the number of elements exceeds ts capacity.                                        if the total number of elements exceeds its capacity.
3.	ArrayList is not a legacy class. It is introduced in JDK 1.2.	                           3.   Vector is a legacy class.
4.	ArrayList is fast because it is non-synchronized.	                                       4.   Vector is slow because it is synchronized
                                                                .	                                i.e., in a multithreading environment, it holds the other threads in a runnable
                                                                                                    or non-runnable state until the current thread releases the lock of the object.

5.	ArrayList uses the Iterator interface to traverse the elements                             5.   A Vector can use the Iterator interface or Enumeration
                                                                                                    interface to traverse the elements.
6	ArrayList performance is high 	                                                           6.   Vector performance is low
7	Multiple threads is allowed                                                                7.   only one threads are allowed .


Link : https://www.geeksforgeeks.org/vector-vs-arraylist-java/


Syntax:

ArrayList: ArrayList<T> al = new ArrayList<T>();
Vector: Vector<T> v = new Vector<T>();


Significant Differences between ArrayList and Vector:

1.  Synchronization: Vector is synchronized, which means only one thread at a time can access the code, while ArrayList is not synchronized, which means multiple threads can work on
ArrayList at the same time. For example, if one thread is performing an add operation, then there can be another thread performing a remove operation in a multithreading environment.
If multiple threads access ArrayList concurrently, then we must synchronize the block of the code which modifies the list structurally or allow simple element modifications.
Structural modification means the addition or deletion of element(s) from the list. Setting the value of an existing element is not a structural modification.

2.  Performance: ArrayList is faster. Since it is non-synchronized, while vector operations give slower performance since they are synchronized (thread-safe), if one thread
works on a vector, it has acquired a lock on it, which forces any other thread wanting to work on it to have to wait until the lock is released.

3.  Data Growth: ArrayList and Vector both grow and shrink dynamically to maintain optimal use of storage – but the way they resize is different. ArrayList increments 50% of
the current array size if the number of elements exceeds its capacity, while vector increments 100% – essentially doubling the current array size.

4.  Traversal: Vector can use both Enumeration and Iterator for traversing over vector elements, while ArrayList can only use Iterator for traversing.

5.  Applications: Most of the time, programmers prefer ArrayList over Vector because ArrayList can be synchronized explicitly using Collections.synchronizedList.


How to choose between ArrayList and Vector?

1.  ArrayList is unsynchronized and not thread-safe, whereas Vectors are. Only one thread can call methods on a Vector, which is slightly overhead but helpful when safety is a
concern. Therefore, in a single-threaded case, ArrayList is the obvious choice, but where multithreading is concerned, vectors are often preferable.

2.  If we don’t know how much data we will have but know the rate at which it grows, Vector has an advantage since we can set the increment value in vectors.

3.  ArrayList is newer and faster. If we don’t have any explicit requirements for using either of them, we use ArrayList over vector.

